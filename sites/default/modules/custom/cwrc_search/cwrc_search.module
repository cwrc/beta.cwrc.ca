<?php

/**
 * @file
 * Code for the cwrc_search feature.
 */

include_once 'cwrc_search.features.inc';

/* Hooks */

/**
 * Implements hook_menu().
 */
function cwrc_search_menu() {
  $items = array();

  // Defines an advanced Islandora search page.
  $items['cwrc_search'] = array(
    'title' => 'Advanced search',
    'page callback' => '_cwrc_search_adv_search',
    'access arguments' => array('search islandora solr'),
  );

  // Defines the tag-aware search page.
  $items['cwrc_search_tag_aware'] = array(
    'title' => 'Tag-aware search',
    'page callback' => '_cwrc_search_tag_aware_search',
    'access arguments' => array('search islandora solr'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 *
 * Adds new templates and theme hooks for CWRC-specific search displays.
 */
function cwrc_search_theme($existing, $type, $theme, $path) {
  return array(
    // Generic wrapper around search results.
    'cwrc_search_results_wrapper' => array(
      'template' => 'templates/cwrc-search-results-wrapper',
      'variables' => array(
        'results' => array(),
        'pager' => NULL,
        'summary' => NULL,
        'secondary' => NULL,
        'layouts' => NULL,
        'sort_options' => NULL,
      ),
      'file' => 'includes/cwrc_search.theme.inc',
    ),

    // Plotit wrapper template.
    'cwrc_search_results_visualization_wrapper' => array(
      'template' => 'templates/cwrc-search-results-visualization-wrapper',
      'variables' => array('embed_url' => NULL),
      'file' => 'includes/cwrc_search.theme.inc',
    ),

    // Generic "results summary" template.
    'cwrc_search_results_summary' => array(
      'template' => 'templates/cwrc-search-results-summary',
      'variables' => array('total' => NULL, 'start' => NULL, 'end' => NULL),
      'file' => 'includes/cwrc_search.theme.inc',
    ),

    // Individual "name" in "list of names".
    'cwrc_search_list_name' => array(
      'template' => 'templates/cwrc-search-list-name',
      'variables' => array('name' => NULL, 'url' => NULL, 'object' => NULL),
      'file' => 'includes/cwrc_search.theme.inc',
    ),

    // Layout selector.
    'cwrc_search_layouts_select' => array(
      'template' => 'templates/cwrc-search-layouts-select',
      'variables' => array('layouts' => array()),
    ),

    // CWRC search teaser display (will add wrapper for list or grid).
    'cwrc_search_teaser_list' => array(
      'template' => 'templates/cwrc-search-teaser-list',
      'variables' => array(
        'object' => NULL,
        'object_url' => NULL,
        'cmodel_label' => NULL,
        'cmodel_class' => NULL,
        'thumbnail' => NULL,
        'project_logo' => NULL,
        'project_name' => NULL,
        'project_url' => NULL,
        'dc_title' => NULL,
        'dc_creator' => NULL,
        'dc_date' => NULL,
        'dc_description' => NULL,
      ),
    ),

    // CWRC search teaser display (will add wrapper for list or grid).
    'cwrc_search_teaser_grid' => array(
      'template' => 'templates/cwrc-search-teaser-grid',
      'variables' => array(
        'object' => NULL,
        'object_url' => NULL,
        'cmodel_label' => NULL,
        'cmodel_class' => NULL,
        'thumbnail' => NULL,
        'project_logo' => NULL,
        'project_name' => NULL,
        'project_url' => NULL,
        'dc_title' => NULL,
        'dc_creator' => NULL,
        'dc_date' => NULL,
        'dc_description' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_islandora_solr_facet().
 */
function cwrc_search_preprocess_islandora_solr_facet(&$variables) {
  // Add a theme hook suggestion just for good measure.
  $variables['theme_hook_suggestions'][] = $variables['theme_hook_original'] . '__' . $variables['pid'];
}

/**
 * Implements hook_islandora_solr_query_blocks().
 *
 * Adds CWRC versions of several search blocks so that we can tweak/modify them
 * without breaking Islandora core.
 */
function cwrc_search_islandora_solr_query_blocks() {
  return array(
    // "Current query" block for displaying enabled filters.
    'cwrc_current_query' => array(
      'name' => t('CWRC Islandora query'),
      'module' => 'cwrc_search',
      'file' => 'includes/classes/CwrcSolrResults.php',
      'class' => 'CwrcSolrResults',
      'function' => 'currentQuery',
      'form' => NULL,
    ),

    // "Facets" block that displays all available facets.
    'cwrc_basic_facets' => array(
      'name' => t('CWRC Islandora facets'),
      'module' => 'cwrc_search',
      'file' => 'includes/classes/CwrcSolrResults.php',
      'class' => 'CwrcSolrResults',
      'function' => 'displayFacets',
      'form' => NULL,
    ),

    // "Display switch" block that shows tabs for alternate displays.
    'cwrc_display_switch' => array(
      'name' => t('CWRC Islandora displays'),
      'module' => 'cwrc_search',
      'file' => 'includes/cwrc_search.blocks.inc',
      'class' => NULL,
      'function' => 'cwrc_search_solr_display_tabs',
      'form' => NULL,
    ),
  );
}

/**
 * Implements hook_islandora_solr_primary_display().
 *
 * Defines our search displays.
 *
 * The classes used below all extend CwrcSolrResults which, in turn, extends
 * IslandoraSolrResults.  The aim is to modify the behaviour as little as
 * possible, however we are using different theme hooks and some other globals
 * that facilitated having a generic "parent" class.
 */
function cwrc_search_islandora_solr_primary_display() {
  $displays = array(
    // "All Results" view (smorgasboard).
    'cwrc_search_all' => array(
      'name' => t('All Results'),
      'module' => 'cwrc_search',
      'file' => 'includes/classes/CwrcSolrResultsAll.php',
      'class' => 'CwrcSolrResultsAll',
      'function' => 'displayResults',
      'description' => t('Display all results in a list or grid.'),
    ),

    // "List of names" display.
    'cwrc_search_list_names' => array(
      'name' => t('List of Names'),
      'module' => 'cwrc_search',
      'file' => 'includes/classes/CwrcSolrResultsListNames.php',
      'class' => 'CwrcSolrResultsListNames',
      'function' => 'displayResults',
      'description' => t('Show only "people" in the CWRC collaboratory as a list of names.'),
    ),

    // "Bibliographic view" display.
    'cwrc_search_bibliographic_view' => array(
      'name' => t('Bibliographic View'),
      'module' => 'cwrc_search',
      'file' => 'includes/classes/CwrcSolrResultsBibliographicView.php',
      'class' => 'CwrcSolrResultsBibliographicView',
      'function' => 'displayResults',
      'description' => t('Display bibliographic entries for results.'),
    ),

    // "Documents" display.
    'cwrc_search_documents' => array(
      'name' => t('Documents'),
      'module' => 'cwrc_search',
      'file' => 'includes/classes/CwrcSolrResultsDocuments.php',
      'class' => 'CwrcSolrResultsDocuments',
      'function' => 'displayResults',
      'description' => t('Display only documents in the CWRC collaboratory.'),
    ),
  );

  // Add visualization tool search displays.
  foreach (cwrc_visualization_info_tools() as $name => $tool) {
    if (isset($tool['search display'])) {
      $displays['cwrc_search_' . $name] = array(
        'name' => $tool['label'],
        'module' => 'cwrc_search',
        'file' => 'includes/classes/CwrcSolrResultsVisualization.php',
        'class' => 'CwrcSolrResultsVisualization',
        'function' => 'displayResults',
        'description' => t('Display @label results.', array('@label' => $tool['label'])),
        'original_display' => $tool['search display'],
        'hide_facets' => $tool['search hide facets'],
      );
    }
  }

  return $displays;
}

/**
 * Implements hook_islandora_solr_query().
 *
 * Limits results for our displays, this cannot be done in the result display
 * classes so we must override it here.
 */
function cwrc_search_islandora_solr_query($solr) {
  $filter_query = '';

  // Limit "list of names" to people cmodels.
  if ($solr->display == 'cwrc_search_list_names') {
    $filter_query = 'RELS_EXT_hasModel_uri_ms:"info:fedora/cwrc:person-entityCModel" OR RELS_EXT_hasModel_uri_ms:"info:fedora/islandora:personCModel"';

    // Limit "documents" to document cmodels.
  }
  elseif ($solr->display == 'cwrc_search_documents') {
    $filter_query = 'RELS_EXT_hasModel_uri_ms:"info:fedora/cwrc:documentCModel"';

    // Limit "events" to event cmodels.
  }
  elseif ($solr->display == 'cwrc_search_events') {
    $filter_query = 'RELS_EXT_hasModel_uri_ms:"info:fedora/islandora:eventCModel"';

    // Limit "bibliographic" to objects with a MODS record.
  }
  elseif ($solr->display == 'cwrc_search_bibliographic_view') {
    $filter_query = 'fedora_datastreams_ms:"MODS"';
  }

  // Add the filter query if available.
  if (!empty($filter_query)) {
    $solr->solrParams['fq'][] = $filter_query;
  }
}

/**
 * Implements hook_form_alter().
 */
function cwrc_search_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id != "islandora_solr_advanced_search_form") {
    return;
  }
  unset($form['xquery']);
}

/* Theme functions. */

/**
 * Implements MODULE_preprocess_HOOK() for cwrc_search_teaser_list.
 *
 * Loads variables for display of an object in a search view.
 */
function cwrc_search_preprocess_cwrc_search_teaser_list(&$variables) {
  // Pass to generic preprocessor for most variables.
  cwrc_search_preprocess_cwrc_search_teaser($variables);

  // Add list class.
  $variables['classes_array'][] = 'list-display';
}

/**
 * Implements MODULE_preprocess_HOOK() for cwrc_search_teaser_grid.
 *
 * Loads variables for display of an object in a search view.
 */
function cwrc_search_preprocess_cwrc_search_teaser_grid(&$variables) {
  // Pass to generic preprocessor for most variables.
  cwrc_search_preprocess_cwrc_search_teaser($variables);

  // Add list class.
  $variables['classes_array'][] = 'grid-display';
}

/**
 * Implements MODULE_preprocess_HOOK() for cwrc_search_teaser.
 *
 * Loads variables for display of an object in a search view.
 */
function cwrc_search_preprocess_cwrc_search_teaser(&$variables) {
  global $language;

  // Attempt to load the object from PID.
  if (!is_object($variables['object']) && is_scalar($variables['object'])) {
    $variables['object'] = islandora_object_load($variables['object']);
  }

  // Cannot load and/or find this object, don't do any other processing.
  if ($variables['object'] === NULL || $variables['object'] === FALSE) {
    return;
  }

  // Get the object from the set variables.
  $object = $variables['object'];

  // Object URL.
  $variables['object_url'] = url('islandora/object/' . $object->id);

  // Load cmodel object and statically cache it.
  $cmodel_id = _cwrc_search_extract_cmodel($object->models);
  $cmodel_object = &drupal_static(__FUNCTION__ . ':' . $cmodel_id);
  if (!isset($cmodel_object)) {
    $cmodel_object = islandora_object_load($cmodel_id);
  }

  // Set label and classes for cmodel.
  $variables['cmodel_label'] = $cmodel_object->label;
  $variables['cmodel_class'] = strtolower(drupal_clean_css_identifier($cmodel_id, array(
    ':' => '-',
    ' ' => '-',
    '_' => '-',
    '/' => '-',
    '[' => '-',
    ']' => '',
  )));
  $variables['classes_array'][] = $variables['cmodel_class'];

  // Check for thumbnail datastream.
  if (!isset($variables['thumbnail']) && isset($object['TN'])) {
    $image = array(
      '#theme' => 'image',
      '#path' => url('islandora/object/' . $object->id . '/datastream/TN/view'),
      '#alt' => t('@object thumbnail', array('@object' => $object->label)),
      '#attributes' => array(),
    );
    $variables['thumbnail'] = render($image);
  }

  // Check for single parent project, set logo and id.
  $project = _cwrc_projects_get_project($object->id);
  if ($project) {
    $wrapper = entity_metadata_wrapper('node', $project);
    $wrapper->language($language->language);
    $variables['project_name'] = $wrapper->title_field->value();
    $variables['project_url'] = url('node/' . $wrapper->getIdentifier());
    if ($value = $wrapper->field_logo->value()) {
      $image = array(
        '#theme' => 'image_style',
        '#style_name' => 'thumbnail',
        '#path' => $value['uri'],
        '#alt' => $value['alt'],
        '#attributes' => array(),
      );
      $variables['project_logo'] = render($image);
    }
  }

  // Load DC datastream into DOMDocument wrapper.
  if (isset($object['DC'])) {
    $dc_doc = new DOMDocument();
    $dc_doc->loadXML($object['DC']->content);

    // Get xpath and register dc namespaces for querying.
    $dc_xpath = new DOMXPath($dc_doc);
    $dc_xpath->registerNamespace('dc', 'http://purl.org/dc/elements/1.1/');
    $dc_xpath->registerNamespace('oai_dc', 'http://www.openarchives.org/OAI/2.0/oai_dc/');
  }

  // Check for DC title, fallback on object label.
  if (!isset($variables['dc_title'])) {
    if (isset($dc_doc)) {
      $title_node = $dc_xpath->evaluate('/oai_dc:dc/dc:title/text()');
      if ($title_node->item(0)) {
        $variables['dc_title'] = $title_node->item(0)->nodeValue;
      }
      else {
        $variables['dc_title'] = $object->label;
      }
    }
    else {
      $variables['dc_title'] = $object->label;
    }
  }

  // Check for DC description.
  if (!isset($variables['dc_description']) && isset($dc_doc)) {
    $description_node = $dc_xpath->evaluate('/oai_dc:dc/dc:description/text()');
    if ($description_node->item(0)) {
      $variables['dc_description'] = truncate_utf8($description_node->item(0)->nodeValue, 200, TRUE, TRUE);
    }
  }

  // Check for DC creator.
  if (!isset($variables['dc_creator']) && isset($dc_doc)) {
    $creator_node = $dc_xpath->evaluate('/oai_dc:dc/dc:creator/text()');
    if ($creator_node->item(0)) {
      $variables['dc_creator'] = $creator_node->item(0)->nodeValue;
    }
  }

  // Check for DC date.
  if (!isset($variables['dc_date']) && isset($dc_doc)) {
    $date_node = $dc_xpath->evaluate('/oai_dc:dc/dc:date/text()');
    if ($date_node->item(0)) {
      $variables['dc_date'] = $date_node->item(0)->nodeValue;
    }
  }
}

/**
 * Implements MODULE_preprocess_HOOK() for islandora_solr.
 *
 * Blocks the default image from the thumbnail URL.
 */
function cwrc_search_preprocess_islandora_solr(&$variables) {
  foreach ($variables['results'] as &$result) {
    if ($result['thumbnail_url'] == drupal_get_path('module', 'islandora_solr') . '/images/defaultimg.png') {
      $result['thumbnail_url'] = NULL;
    }
  }
}

/* Menu callbacks. */

/**
 * Page callback: Displays an advanced Islandora search page.
 *
 * @return array
 *   A render array for a page containing an advanced Islandora search page.
 *
 * @see cwrc_adv_search_page_menu()
 */
function _cwrc_search_adv_search() {
  return quicktabs_build_quicktabs('cwrc_advanced_search', array(), array());
}

/* Form handlers. */

/**
 * Form constructor for the tag-aware search form.
 *
 * @ingroup forms
 */
function _cwrc_search_tag_aware_search() {
  $form['tag_aware_search_iframe'] = array(
    '#markup' => '<iframe src="http://echidna.ca/"></iframe>',
  );

  return $form;
}

/**
 * Search form callback.
 */
function cwrc_search_sort_form($form, &$form_state) {
  $sort_fields = islandora_solr_get_fields('sort_fields');

  if (count($sort_fields) == 0) {
    return array();
  }

  // Get parameters and current sort.
  $params = drupal_get_query_parameters();
  if (isset($params['sort'])) {
    $sort_params = explode(' ', $params['sort']);
    $current_sort_direction = array_pop($sort_params);
    $current_sort_field = implode(' ', $sort_params);
  }
  else {
    $current_sort_direction = 'desc';
    $current_sort_field = 'score';
  }

  $form = array();

  $form['sort_field'] = array(
    '#type' => 'select',
    '#options' => $sort_fields,
    '#default_value' => $current_sort_field,
    '#title' => t('Sort field'),
  );

  $form['sort_direction'] = array(
    '#type' => 'select',
    '#options' => array(
      'asc' => t('Ascending'),
      'desc' => t('Descending'),
    ),
    '#default_value' => $current_sort_direction,
    '#title' => t('Sort direction'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Change'),
  );

  return $form;
}

/**
 * Submit handler for the search sort form, redirects to new search sort page.
 */
function cwrc_search_sort_form_submit($form, &$form_state) {
  $params = drupal_get_query_parameters();
  $values = $form_state['values'];
  $params['sort'] = $values['sort_field'] . ' ' . $values['sort_direction'];
  drupal_goto(current_path(), array('query' => $params));
}

/* Helper functions. */

/**
 * Helper function that extracts a single valid cmodel from a passed array.
 *
 * Primarily used to filter out `fedora-system` namespace cmodels (because we
 * just don't care about those ones).
 *
 * @param array $models
 *   An array of cmodel PIDs.
 *
 * @return mixed
 *   A single cmodel PID.
 */
function _cwrc_search_extract_cmodel($models) {
  foreach ($models as $key => $value) {
    if (substr($value, 0, 13) == 'fedora-system') {
      unset($models[$key]);
    }
  }

  // This definitely isn't bullet-proof.
  $return = reset($models);
  return $return;
}
