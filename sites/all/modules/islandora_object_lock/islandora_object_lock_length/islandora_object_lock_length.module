<?php

/**
 * @file
 * This drupal module contains functionality to allow for
 * collection level specific lock length configuration. The
 * primary entry point for this module is
 * hook_islandora_basic_collection_build_manage_object().
 */

// Permission.
define('ISLANDORA_OBJECT_LOCK_LENGTH_MANAGE_LOCK_DURATION', 'manage lock duration');

/**
 * Implements hook_permission().
 */
function islandora_object_lock_length_permission() {
  return array(
    ISLANDORA_OBJECT_LOCK_LENGTH_MANAGE_LOCK_DURATION => array(
      'title' => t('Manage Islandora object locks length'),
    ),
  );
}

/**
 * Implements hook_islandora_basic_collection_build_manage_object().
 */
function islandora_object_lock_length_islandora_basic_collection_build_manage_object($form_state, $object) {
  $form_state['manage_collection_object']['manage_obj_lock'] = array(
    '#id' => 'manage-obj-lock',
    '#group' => 'manage_obj_object',
    '#access' => user_access(ISLANDORA_OBJECT_LOCK_LENGTH_MANAGE_LOCK_DURATION),
    '#type' => 'fieldset',
    '#title' => t('Manage lock objects'),
    'form' => drupal_get_form('islandora_object_lock_length_manage_lock_form', $object),
  );
  $form_state['manage_collection_object']['manage_obj_lock']['form']['#submit'][] = 'islandora_object_lock_length_manage_lock_form_submit';
  return $form_state;
}

/**
 * Create the manage_lock_form.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The current $form_state.
 * @param AbstractObject $object
 *   The Fedora object in qustion.
 *
 * @return array
 *   The form to be appended to the manage object.
 */
function islandora_object_lock_length_manage_lock_form(array $form, array &$form_state, AbstractObject $object) {
  module_load_include('inc', 'islandora_object_lock_length', 'includes/utilities');
  $form_state['storage'] = array('pid' => $object->id);
  $global_lock_length = variable_get('islandora_object_lock_duration', 30);
  $collection_lock = islandora_object_lock_length_get_collection_lock($object->id);
  $default_duration = (isset($collection_lock->duration) ? $collection_lock->duration : $global_lock_length);
  if ($default_duration == 'indefinite' || $default_duration == FALSE) {
    $default_choice = 'indefinite';
  }
  else {
    $default_choice = 'minutes';
  }
  $form['choice'] = array(
    '#type' => 'radios',
    '#title' => t('Collection level lock'),
    '#options' => array(
      'indefinite' => t('Indefinite'),
      'minutes' => t('Minutes'),
    ),
    '#default_value' => $default_choice,
  );
  $form['duration'] = array(
    '#type' => 'textfield',
    '#title' => t('Collection level Lock duration (minutes)'),
    '#default_value' => ($default_choice == 'minutes') ? $default_duration : '',
    '#description' => t('Override default lock length for all children of this collection (objects and subcollections).'),
    '#states' => array(
      'visible' => array(
        ':input[name="choice"]' => array('value' => 'minutes'),
      ),
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Set collection level lock duration'),
  );
  $form['remove_lock'] = array(
    '#type' => 'submit',
    '#value' => t('Remove existing collection lock'),
    '#access' => isset($collection_lock->duration) ? TRUE : FALSE,
  );
  return $form;
}

/**
 * Validation for the collection length lock form.
 *
 * @param array $form
 *   An array representing a form within Drupal.
 * @param array $form_state
 *   An array containing the Drupal form state.
 */
function islandora_object_lock_length_manage_lock_form_validate($form, $form_state) {
  if ($form_state['values']['choice'] == 'minutes') {
    if (empty($form_state['values']['duration'])) {
      form_error($form['duration'], t('Please specify a non-empty duration.'));
    }
    else {
      element_validate_integer_positive($form['duration'], $form_state);
    }
  }
}

/**
 * Submit handler for manage_lock_form.
 *
 * @param array $form
 *   The form being processed.
 * @param array $form_state
 *   The current $form_state.
 */
function islandora_object_lock_length_manage_lock_form_submit(array $form, array &$form_state) {
  module_load_include('inc', 'islandora_object_lock_length', 'includes/utilities');
  if ($form_state['triggering_element']['#parents'] == array('submit')) {
    // Get Collection lock duration if it is already set.
    $collection_lock_length = islandora_object_lock_length_get_collection_lock($form_state['storage']['pid']);
    $default_lock_length = variable_get('islandora_object_lock_duration', 30);

    // No need to add the lock value if it is the same as the global default
    // lock. See if the choice and default values match before we do anything.
    $duration = $form_state['values']['duration'];
    $choice = $form_state['values']['choice'];
    if (($choice == 'minutes' && $duration != $default_lock_length) || ($choice == 'indefinite' && $default_lock_length != FALSE)) {
      // Delete old value, if it exists.
      if (isset($collection_lock_length->duration)) {
        islandora_object_lock_length_remove_collection_lock($form_state['storage']['pid']);
      }
      // Add the specified lock length.
      $duration = $form_state['values']['choice'] == 'minutes' ? $form_state['values']['duration'] : 'indefinite';
      islandora_object_lock_length_add_collection_lock($form_state['storage']['pid'], $duration);
    }
    // If the value is being set back to default, remove the previous entry.
    if ($collection_lock_length) {
      if (($choice == 'minutes' && $form_state['values']['duration'] == $default_lock_length) || ($choice == 'indefinite' && $default_lock_length == FALSE)) {
        islandora_object_lock_length_remove_collection_lock($form_state['storage']['pid'], $form_state['values']['duration']);
      }
    }
    drupal_set_message(t('Collection level lock has been set.'));
  }
  else {
    islandora_object_lock_length_remove_collection_lock($form_state['storage']['pid'], $form_state['values']['duration']);
    drupal_set_message(t('The existing collection lock has been removed.'));
  }
}

/**
 * Computes/gathers all collection level lock durations.
 *
 * @param string $pid
 *   The pid to compute the duration for.
 *
 * @return array
 *   The array of parent collection lock lengths.
 */
function islandora_object_lock_length_get_available_lock_length($pid) {
  module_load_include('inc', 'islandora_object_lock_length', 'includes/utilities');
  module_load_include('inc', 'islandora_basic_collection', 'includes/utilities');

  // Empty the locks array.
  $locks = array();
  // Get local collection lock if it exists.
  $current_object_lock = islandora_object_lock_length_get_collection_lock($pid);
  if (isset($current_object_lock) && isset($current_object_lock->duration)) {
    // This is a collection with a set lock length.
    $locks[] = $current_object_lock->duration == 'indefinite' ? FALSE : $current_object_lock->duration;
  }
  else {
    $object = islandora_object_load($pid);
    $parent_pids = islandora_basic_collection_get_parent_pids($object);
    // Check this objects parents for collection level locks,
    // and include them in our locks array.
    foreach ($parent_pids as $parent_pid) {
      $lock = islandora_object_lock_length_get_collection_lock($parent_pid);
      if (isset($lock->duration) && $lock->duration) {
        $locks[] = $lock->duration == 'indefinite' ? FALSE : $lock->duration;
      }
    }
  }
  return $locks;
}
