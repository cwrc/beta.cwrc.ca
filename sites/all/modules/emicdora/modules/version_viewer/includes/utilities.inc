<?php

/**
 * @file
 * Defines all the utility functions this module implements.
 */

/**
 * Returns transformed from CWRC datatstream.
 *
 * @global type $base_url
 *
 * @param AbstractObject $version_object
 *   Object representing version object
 * @param AbstractObject $object
 *   Object representing fedora page object
 * @param string $dsid
 *   Datastream ID of object
 *
 * @return string
 *   transformed xml
 */
function versionable_object_viewer_display_page_tei($version_object, $object, $dsid = 'TEI_RDF') {
  $callable_mapping = array(
    'rd' => 'versionable_object_viewer_display_page_tei_reading',
    'dt' => 'versionable_object_viewer_display_page_tei_diplomatic',
  );
  $type = isset($_GET['type']) ? $_GET['type'] : 'rd';
  $callable = $callable_mapping[$type];

  return $callable($version_object->id, $object[$dsid]);
}

/**
 * Render transcription markup.
 *
 * @param string $version_pid
 *   pid of version providing context
 * @param AbstractDatastream $datastream
 *   The datastream containing the TEI for which to produce a transcription.
 * @param string $type
 *   The type of transcription. At time of writing, we support:
 *   - reading
 *   - diplomatic
 *
 * @return string
 *   A string of HTML to output... Likely with significant styling.
 */
function versionable_object_viewer_render_transcription($version_pid, AbstractDatastream $datastream, $type) {
  global $base_url;
  $path = drupal_get_path('module', 'versionable_object_viewer');
  $input = new DOMDocument();
  $content = preg_replace('/<\?xml-model .*\?>/', '', $datastream->content);
  $input->loadXML($content);
  $wrapper_xslt_doc = new DOMDocument();
  $wrapper_xslt_doc->load("$path/tei_transforms/wrap.xslt");
  $wrapper_xslt = new XSLTProcessor();
  $wrapper_xslt->importStylesheet($wrapper_xslt_doc);
  $wrapped = $wrapper_xslt->transformToDoc($input);

  module_load_include('inc', 'versionable_object_viewer', 'includes/tei_refcounter');
  \VersionableObjectViewer\count_refs($wrapped);
  $unwrapper_xslt_doc = new DOMDocument();
  $unwrapper_xslt_doc->load("$path/tei_transforms/unwrap.xslt");
  $unwrapper_xslt = new XSLTProcessor();
  $unwrapper_xslt->importStylesheet($unwrapper_xslt_doc);
  $unwrapper_xslt->setParameter('', 'type', $type);
  $tempfile = drupal_tempnam('public://', 'tei');
  $unwrapper_xslt->transformToUri($wrapped, $tempfile);
  $source = file_create_url($tempfile);
  $style = file_create_url("$path/tei_transforms/tei2html.xslt");

  $islandora_url = variable_get('islandora_base_url', 'http://localhost:8080/fedora');
  $tomcat_url = str_replace('/fedora', '', $islandora_url);
  $saxon_url = url("$tomcat_url/saxon/SaxonServlet", array(
    'absolute' => TRUE,
    'external' => TRUE,
    'query' => array(
      'style' => $style,
      'source' => $source,
      'clear-stylesheet-cache' => 'yes',
      'css_base' => file_create_url("$path/tei_transforms"),
      'type' => $type,
    ),
  ));
  $result = drupal_http_request($saxon_url);

  // If a custom XSLT is provided by the user it's run on the HTML generated by
  // tei2html.xslt rather than the TEI; as handling @place and footnotes will
  // be beyond what any user will be capable of.
  $config = version_viewer_get_config($version_pid);
  if ($config && $config->xslt) {
    $file = file_save_data($result->data, file_default_scheme() . '://');
    $file->status &= ~FILE_STATUS_PERMANENT;
    $file = file_save($file);
    $custom_url = url("$tomcat_url/saxon/SaxonServlet", array(
      'absolute' => TRUE,
      'external' => TRUE,
      'query' => array(
        'style' => $config->xslt,
        'source' => file_create_url($file->uri),
        'clear-stylesheet-cache' => 'yes',
      ),
    ));

    $custom_result = drupal_http_request($custom_url);
    if ($custom_result->code == 200) {
      $result = $custom_result;
    }
    else {
      watchdog('versionable_object_viewer', 'Custom XSLT fails. Config info: "@config", PID: "@pid", data: @data', array(
        '@config' => print_r($config, TRUE),
        '@pid' => $version_pid,
        '@data' => $custom_result->data,
      ), WATCHDOG_WARNING, l(t('view'), "islandora/object/$version_pid"));
    }

    file_delete($file);
  }
  return $result->data;
}

/**
 * Callback for versionable_object_viewer_display_page_tei for reading display.
 *
 * @param string $version_pid
 *   pid of version providing context
 * @param AbstractDatastream $datastream
 *   The datastrean to use to generate the display.
 *
 * @return string
 *   A string of markup to use, representing the reading display.
 */
function versionable_object_viewer_display_page_tei_reading($version_pid, AbstractDatastream $datastream) {
  return versionable_object_viewer_render_transcription($version_pid, $datastream, 'reading');
}

/**
 * Callback for diplomatic display.
 *
 * @param string $version_pid
 *   Pid of version providing context.
 *
 * @param AbstractDatastream $datastream
 *   The datastrean to use to generate the display.
 *
 * @return string
 *   A string of markup to use, representing the diplomatic display.
 */
function versionable_object_viewer_display_page_tei_diplomatic($version_pid, AbstractDatastream $datastream) {
  return versionable_object_viewer_render_transcription($version_pid, $datastream, 'diplomatic');
}

/**
 * Retrieve rdf entity data.
 *
 * @param AbstractObject $object
 *   Fedora object with rdf datastream(s).
 * @param string $dsid
 *   The datastream id, defaults to 'CWRC'.
 *
 * @return array
 *   The array of rdf data entries.
 */
function versionable_object_viewer_read_rdf($object, $dsid = 'CWRC') {
  $entities = array();
  $obj = NULL;
  // RDF is embedded in the TEI.
  $content = preg_replace('/<\?xml-model .*\?>/', '', $object[$dsid]->content);
  $xml = simplexml_load_string($content);

  $xml->registerXPathNamespace('rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');
  $rdf = $xml->xpath('//rdf:RDF');
  if (!$rdf) {
    return array();
  }
  $xml = simplexml_load_string(reset($rdf)->asXML());
  // We don't display entities or annotations aside from those listed,
  // notes, dates or citations.
  $valid_entity_types = array(
    'http://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing',
    'http://xmlns.com/foaf/0.1/Organization',
    'http://xmlns.com/foaf/0.1/Image',
    'http://xmlns.com/foaf/0.1/Person',
    'http://xmlns.com/foaf/0.1/Place',
    'http://purl.org/dc/terms/BibliographicResource',
  );
  // Fetches each annotation.
  $annotations = $xml->xpath("//rdf:Description[rdf:type/@rdf:resource = 'http://www.w3.org/ns/oa#Annotation']");
  foreach ($annotations as $annotation) {
    $id = NULL;
    $parsed_start = NULL;
    $parsed_end = NULL;
    $anchor_type = 'element';
    $body = $annotation->xpath('oa:hasBody/@rdf:resource');
    $body = (string) reset($body);
    $type = $xml->xpath("//rdf:Description[@rdf:about = '$body']/rdf:type[@rdf:resource != 'http://www.w3.org/ns/oa#SemanticTag']/@rdf:resource");
    $type = (string) reset($type);
    if (!in_array($type, $valid_entity_types)) {
      continue;
    }
    $target = $annotation->xpath('oa:hasTarget/@rdf:resource');
    $target = (string) reset($target);
    $selector = $xml->xpath("//rdf:Description[@rdf:about = '$target']/oa:hasSelector/@rdf:resource");
    $selector = (string) reset($selector);
    $selection = $xml->xpath("//rdf:Description[@rdf:about = '$selector']/rdf:value");
    $selection = (string) reset($selection);
    // If there is no selection check if it is an overlapping annotation.
    if (!$selection) {
      $parse_xpointer = function ($xpointer) {
        preg_match('!xpointer\(string-range\(//(.*)\[\@(.*)="([^"]+)"\],"",(\d+)\)\)!', $xpointer, $matches);
        return array_combine(array(
          'element',
          'id_attribute',
          'id',
          'offset',
        ), array_slice($matches, 1));
      };
      $start_xpointer = $xml->xpath("//rdf:Description[@rdf:about = '$selector']/oa:start");
      $start_xpointer = (string) reset($start_xpointer);
      $end_xpointer = $xml->xpath("//rdf:Description[@rdf:about = '$selector']/oa:end");
      $end_xpointer = (string) reset($end_xpointer);
      if ($start_xpointer && $end_xpointer) {
        $anchor_type = 'offset';
        $id = drupal_html_id('offset');
        $parsed_start = $parse_xpointer($start_xpointer);
        $parsed_end = $parse_xpointer($end_xpointer);
      }
    }
    $cwrc_info = $annotation->xpath('cw:cwrcInfo');
    $cwrc_info = json_decode((string) reset($cwrc_info));
    $cwrc_attributes = $annotation->xpath('cw:cwrcAttributes');
    $cwrc_attributes = json_decode((string) reset($cwrc_attributes));
    // Sometimes CWRC-Writer has garbage in it.
    if (!is_object($cwrc_attributes)) {
      continue;
    }
    // JS code expects the following variables to be in these places.
    $cwrc_attributes->cwrcInfo = $cwrc_info;
    if (!isset($cwrc_attributes->attributes)) {
      $cwrc_attributes->attributes = new stdClass();
    }
    // Image Annotation code in init.js expects the UUID to be set for Text
    // to Image Links and nothing else uses it so we'll just always set it.
    if (isset($cwrc_attributes->attributes->id)) {
      $cwrc_attributes->attributes->uuid = $cwrc_attributes->attributes->id;
    }
    // CWRC Entities store their description on another object.
    if (isset($cwrc_attributes->cwrcInfo->id)) {
      $parts = explode('/', $cwrc_attributes->cwrcInfo->id);
      if (array_slice($parts, -3, 2) === array('islandora', 'object')) {
        $pid = end($parts);
        $obj = islandora_object_load($pid);
        if ($obj) {
          module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');
          $cwrc_dsid = islandora_cwrc_writer_entity_content_datastream_id($obj);
          // Read the first note in the descriptiveNote tag.
          if (!empty($obj[$cwrc_dsid]->content)) {
            $dom_datastream = new DOMDocument();
            // Remove xml-model tag so it does not error when reading the xml.
            $contents = $obj[$cwrc_dsid]->content;
            $contents = preg_replace('/<\?xml-model .*\?>/', '', $contents);
            $dom_datastream->loadXML($contents);
            $xpath = new DOMXPath($dom_datastream);
            // Find descriptive notes element in the datastream.
            $descriptive_note_node = $xpath->query('//descriptiveNotes/note');
            if ($descriptive_note_node->length > 0) {
              // Only return the first descriptive note to display.
              $cwrc_info->description = $descriptive_note_node->item(0)->nodeValue;
            }
          }
        }
      }
    }
    $types = array(
      'http://www.w3.org/2003/01/geo/wgs84_pos#SpatialThing' => 'place',
      'http://xmlns.com/foaf/0.1/Organization' => 'organization',
      'http://xmlns.com/foaf/0.1/Image' => 'textimagelink',
      'http://xmlns.com/foaf/0.1/Person' => 'person',
      'http://xmlns.com/foaf/0.1/Place' => 'place',
      'http://purl.org/dc/terms/BibliographicResource' => 'title',
    );
    $type = isset($types[$type]) ? $types[$type] : '';
    $matches = array();
    preg_match('/@annotationId="(.*)"/', $selection, $matches);
    if (empty($matches)) {
      if (!$id) {
        continue;
      }
    }
    else {
      $id = $matches[1];
    }
    if (!isset($cwrc_info->repository)) {
      $cwrc_info->name = $obj ? $obj->label : $id;
    }

    $entity = array(
      'id' => $id,
      'type' => $type,
      'text' => isset($cwrc_info->name) ? $cwrc_info->name : $id,
      'attributes' => array(
        'annotationId' => $id,
        'cwrcType' => $type,
        'cwrcAttributes' => $cwrc_attributes,
        'anchorType' => $anchor_type,
        'offsets' => array(
          'start' => $parsed_start,
          'end' => $parsed_end,
        ),
      ),
    );
    $no_dialog_types = array(
      'textimagelink',
    );
    if (!in_array($type, $no_dialog_types)) {
      $entity['attributes']['dialogId'] = "ent_dialog_$id";
      $entity['attributes']['dialogMarkup'] = versionable_object_viewer_generate_entity_dialog_markup($id, $cwrc_attributes, $type);
    }
    $entity['attributes']['descriptiveNote'] = isset($cwrc_info->description) ? $cwrc_info->description : NULL;
    $entities[] = $entity;
  }
  return $entities;
}

/**
 * Generate markup to show in an entity's popup dialog.
 *
 * @param string $id
 *   The ID of the annotation referencing the entity.
 * @param object $info
 *   A stdClass object containing at least:
 *   - cwrcInfo: A stdClass object containing at least:
 *     - id: A string identifying the object in the given repo... A URL for our
 *       stuff in the "cwrc" repository.
 * @param string $record_type
 *   person, place, image or organization
 */
function versionable_object_viewer_generate_entity_dialog_markup($id, $info, $record_type) {
  if (!isset($info->cwrcInfo->id)) {
    // Current implementation only supports the local repository.
    return NULL;
  }
  $parts = explode('/', $info->cwrcInfo->id);
  $type = (isset($parts[3]) && $parts[3] == 'viaf') ? 'viaf' : 'islandora';
  switch ($type) {
    case 'viaf':
      $viaf_id = $parts[4];
      if ($record_type == 'organization') {
        $content_markup = versionable_object_viewer_generate_viaf_organization_markup($viaf_id);
      }
      else {
        $content_markup = versionable_object_viewer_generate_viaf_markup($viaf_id);
      }
      break;

    case 'islandora':
      $pid = end($parts);
      $object = islandora_object_load($pid);
      if (!$object) {
        // Some places don't have objects.
        if ($record_type == 'place') {
          $content_markup = versionable_object_viewer_generate_geoname_markup(
            $info->cwrcInfo->id,
            $info->cwrcInfo->name
          );
        }
        else {
          return NULL;
        }
      }
      if (!isset($content_markup)) {
        module_load_include('inc', 'islandora_cwrc_writer', 'includes/utilities');
        $dsid = islandora_cwrc_writer_entity_content_datastream_id($object);
        $content_markup = versionable_object_viewer_generate_markup($object[$dsid]->content, $dsid);
      }
      break;
  }
  return "<div id='ent_dialog_$id' class='entity_dialog'>$content_markup</div>";
}

/**
 * Get markup for for geoname entity dialog.
 *
 * @param string $id
 *   The url for the entity.
 * @param string $name
 *   Human readable name for the entity.
 *
 * @return string
 *   Dialog markup.
 */
function versionable_object_viewer_generate_geoname_markup($id, $name) {
  $name_label = t("Name");
  $link = l($id, $id);
  $url_label = t('URL');
  $dialog = array(
    'name' => array(
      '#markup' => "<span class='version_tooltip_label'>$name_label: </span>$name<br/>",
    ),
    'url' => array(
      '#markup' => "<span class='version_tooltip_label'>$url_label: </span>$link<br/>",
    ),
  );
  return drupal_render($dialog);
}

/**
 * Gets VIAF organization data for dialog.
 *
 * @param string $id
 *   VIAF identifier
 *
 * @return string
 *   Formatted output.
 */
function versionable_object_viewer_generate_viaf_organization_markup($id) {
  $xpath = version_viewer_get_xpath($id);
  $markup = '';
  $orgnames = $xpath->query("/ns2:VIAFCluster/ns2:mainHeadings/ns2:mainHeadingEl/ns2:datafield/ns2:subfield[@code='a']");
  $label = t("Name");
  $markup .= version_viewer_get_markup($label, $orgnames);
  $link = l(t('VIAF Record'), "http://viaf.org/viaf/$id");
  $label = t('URL');
  $markup .= "<span class='version_tooltip_label'>$label: </span>$link<br/>";
  return $markup;
}

/**
 * Gets VIAF data for dialog.
 *
 * @param string $id
 *   VIAF identifier
 *
 * @return string
 *   Formatted output.
 */
function versionable_object_viewer_generate_viaf_markup($id) {
  $xpath = version_viewer_get_xpath($id);
  $markup = '';
  // VIAF Titles.
  // Authors.
  $authors = $xpath->query("/ns2:VIAFCluster/ns2:mainHeadings/ns2:mainHeadingEl/ns2:datafield/ns2:subfield[@code='a']");
  $label = t("Author");
  $markup .= version_viewer_get_markup($label, $authors);

  // Date.
  $dates = $xpath->query("/ns2:VIAFCluster/ns2:mainHeadings/ns2:mainHeadingEl/ns2:datafield/ns2:subfield[@code='d']");
  $label = t("Date");
  $markup .= version_viewer_get_markup($label, $dates);

  // VIAF Persons.
  // Full Name.
  $fullnames = $xpath->query("/ns2:VIAFCluster/ns2:mainHeadings/ns2:mainHeadingEl/ns2:datafield/ns2:subfield[@code='a']");
  $label = t("Full Name");
  $markup .= version_viewer_get_markup($label, $fullnames);

  // Birth-death.
  $birth_death = $xpath->query("/ns2:VIAFCluster/ns2:mainHeadings/ns2:mainHeadingEl/ns2:datafield/ns2:subfield[@code='d']");
  $label = t("Birth-Death");
  $markup .= version_viewer_get_markup($label, $birth_death);
  // Gender.
  $genders = $xpath->query("/ns2:VIAFCluster/ns2:fixed/ns2:gender");
  $label = t("Gender");
  $gender_code = array(
    'a' => t('Male'),
    'b' => t('Female'),
  );
  foreach ($genders as $gender) {
    $value = t('Unspecified');
    $gender_val = $gender->nodeValue;
    if (isset($gender_code[$gender_val])) {
      $value = $gender_code[$gender_val];
    }
    $markup .= "<span class='version_tooltip_label'>$label: </span>$value<br/>";
  }
  // URL to VIAF object.
  $link = l(t('VIAF Record'), "http://viaf.org/viaf/$id");
  $label = t('URL');
  $markup .= "<span class='version_tooltip_label'>$label: </span>$link<br/>";

  return $markup;
}

/**
 * Builds tooltip markup from datastream content.
 *
 * @param datastream $content
 *   Object datastream which contains the data to be rendered out.
 * @param string $dsid
 *   Datastream of the content being rendered to markup.
 *
 * @return string
 *   HTML string of content to be rendered to the tooltip.
 */
function versionable_object_viewer_generate_markup($content, $dsid) {
  // Lookup arrays for variant type for human readable output.
  $variant_type_array = array(
    "birthName" => t("Birth Name"),
    "indexedName" => t("Indexed Name"),
    "marriedName" => t("Married Name"),
    "nickname" => t("Nickname"),
    "pseudonym" => t("Pseudonym"),
    "religiousName" => t("Religious"),
    "royalName" => t("Royal"),
    "selfConstructedName" => t("Self Constructed"),
    "styledName" => t("Styled"),
    "titledName" => t("Titled"),
    "usedForm" => t("Used Form"),
  );
  $markup = '';
  $tag = strtolower($dsid);
  // Load the context, xml document, for parsing.
  $content = preg_replace('/<\?xml-model .*\?>/', '', $content);
  $dom_mods = new DOMDocument();
  $dom_mods->loadXML($content);

  // Begin xpath query operations.
  $xpath = new DOMXPath($dom_mods);
  $xpath->registerNamespace("mods", "http://www.loc.gov/mods/v3");
  if ($dsid == "PERSON" || $dsid == "ORGANIZATION" || $dsid == "PLACE") {
    // Type information.
    $label = t('Organization Type(s)');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/recordInfo/orgTypes/orgType", $label);
    $label = t("Person Type(s)");
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/recordInfo/personTypes/personType", $label);
    $label = t("Place Type(s)");
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/recordInfo/placeTypes/placeType", $label);
    // Project information.

    $label = t("Contributing Project(s)");
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/recordInfo/originInfo/projectId", $label);

    // Preferred Name information.
    $preferred_form = $xpath->query("/entity/$tag/identity/preferredForm");
    if ($preferred_form->length > 0) {
      // Names rendered Name: Term of Address, First, Last.
      $name_array = array();
      $terms_of_address = $xpath->query("/entity/$tag/identity/preferredForm/namePart[@partType='termsOfAddress']");
      version_viewer_conditionally_add($terms_of_address, $name_array);
      $full_name = $xpath->query("/entity/$tag/identity/preferredForm/namePart[@partType='fullName']");
      version_viewer_conditionally_add($full_name, $name_array);
      $fullname = version_viewer_conditionally_add($terms_of_address, $name_array);
      if (!$fullname) {
        $family_name = $xpath->query("/entity/$tag/identity/preferredForm/namePart[@partType='family']");
        version_viewer_conditionally_add($family_name, $name_array);
        $given_name = $xpath->query("/entity/$tag/identity/preferredForm/namePart[@partType='given']");
        version_viewer_conditionally_add($given_name, $name_array);
      }
      if (empty($name_array)) {
        $name = $xpath->query("/entity/$tag/identity/preferredForm/namePart[not(@*)]");
        version_viewer_conditionally_add($name, $name_array);
      }
      if (!empty($name_array)) {
        $label = t('Name');
        $markup .= version_viewer_get_rendered_array($label, $name_array);
      }
    }
    // Variant name(s).
    $variants = $xpath->query("/entity/$tag/identity/variantForms/variant");
    if ($variants->length > 0) {
      foreach ($variants as $variant) {
        $node_xpath = $variant->getNodePath();

        // Names rendered Name: Term of Address, First, Last.
        $name_array = array();
        $terms_of_address = $xpath->query("$node_xpath/namePart[@partType='termsOfAddress']");
        version_viewer_conditionally_add($terms_of_address, $name_array);
        $name_part = $xpath->query("$node_xpath/namePart");
        $full_name = version_viewer_conditionally_add($name_part, $name_array);

        if (!$full_name) {
          $family_name = $xpath->query("$node_xpath/namePart[@partType='family']");
          version_viewer_conditionally_add($family_name, $name_array);
          $given_name = $xpath->query("$node_xpath/namePart[@partType='given']");
          version_viewer_conditionally_add($given_name, $name_array);
        }
        $name_type = $xpath->query("$node_xpath/variantType");
        $label = t('Variant Type');

        if (!empty($name_array)) {
          $label = t('Variant Name');
          $markup .= version_viewer_get_rendered_array($label, $name_array);
        }
        $label = t("Variant Type");
        $markup .= version_viewer_add_markup($xpath, $dom_mods, "$node_xpath/variantType", $label);
      }
    }
    // Same As.
    $label = t("Same As");
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/identity/sameAs", $label);
    // Date(s) of existance.
    $dates = $xpath->query("/entity/$tag/description/existDates/dateSingle");
    if ($dates->length > 0) {
      foreach ($dates as $date) {
        $certainty = version_viewer_get_certainty($xpath, $date);
        // Default value incase type is not set.
        $date_label = t("Date(s) of existance");
        $date_type = $xpath->query("./dateType", $date);
        if ($date_type->length > 0) {
          $date_label = ucfirst($date_type->item(0)->nodeValue);
        }
        $standard_dates = $xpath->query("./standardDate", $date);
        if ($standard_dates->length > 0) {
          foreach ($standard_dates as $standard_date) {
            $output_dates[] = $standard_date->nodeValue;
          }
        }
        if (strtotime($date->nodeValue)) {
          $output_dates[] = $date->nodeValue;
        }
        $dates = implode(', ', $output_dates);
        $markup .= "<span class='version_tooltip_label'>$date_label</span>$dates $certainty<br/>";
      }
    }
    // Factuality.
    $label = t("Factuality");
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/factuality", $label);
    // Gender(s).
    $label = t('Gender');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/genders/gender", $label);
    // Occupation(s).
    $label = t('Occupation');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/occupations/occupation", $label);
    // Note(s).
    $label = t('Note(s)');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/descriptiveNotes/note", $label);
    // Activities/Activity.
    $label = t('Activity');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/activities/activity", $label);
    // Research interest(s)
    $label = t("Research Interest");
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/researchInterests/interest", $label);
    // Related Resource(s).
    $label = t('Resource(s)');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/relatedResources/resource", $label);

    // Location paramaters.
    $label = t('Latitude');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/latitude", $label);
    $label = t('Longitude');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/longitude", $label);
    $label = t('Feature Class');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/featureClass", $label);
    $label = t('Feature Code Label');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/featureCodeLabel", $label);
    $label = t('Country');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/countryName", $label);
    $label = t('First Administrative Division');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/secondAdministrativeDivision", $label);
    $label = t('Second Administrative Division');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/firstAdministrativeDivision", $label);
    $label = t('Elevation');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/elevation", $label);
    $label = t('Average Elevation');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/averageElevation", $label);
    $label = t('Time Zone Offset');
    $markup .= version_viewer_add_markup($xpath, $dom_mods, "/entity/$tag/description/timeZoneOffset", $label);
  }
  elseif ($dsid == "TITLE") {
    $title = $xpath->query("/mods:mods/mods:titleInfo/mods:title");
    $label = t('Title');
    $markup .= version_viewer_get_markup($label, $title);

    $author = $xpath->query("/mods:mods/mods:name[@type='personal']/mods:namePart");
    $label = t("Author");
    $markup .= version_viewer_get_markup($label, $author);

    $type = $xpath->query("/mods:mods/mods:genre[@type='formatType']");
    $label = t("Type of Resource");
    $markup .= version_viewer_get_markup($label, $type);

    $date = $xpath->query("/mods:mods/mods:originInfo/mods:dateIssued");
    $label = t("Date");
    $markup .= version_viewer_get_markup($label, $date);

    $record = $xpath->query("/mods:mods/mods:recordInfo/mods:recordContentSource");
    $label = t("Project");
    $markup .= version_viewer_get_markup($label, $record);
  }
  return $markup;
}

/**
 * Extract svg data for a given svg datastreams content.
 *
 * @param string $anno_svg
 *   The svg annotaton data to parse
 *
 * @return array
 *   The svg data as 'type', 'label' and 'text' (in array).
 */
function versionable_object_viewer_svg_data($anno_svg) {
  module_load_include('inc', 'islandora_image_annotation', 'includes/callbacks');

  $annotation_xml = islandora_image_annotation_shared_transform_annotation_list($anno_svg, 'html');
  $xml = simplexml_load_string($annotation_xml);

  $labels = $xml->xpath('//dc:title');
  $type = $xml->xpath('//dc:type');
  $text = $xml->xpath('//cnt:chars');

  $anno_type = dom_import_simplexml($type[0])->textContent;
  $anno_label = dom_import_simplexml($labels[0])->textContent;
  $anno_text = dom_import_simplexml($text[0])->textContent;

  $svg_info = array(
    'type' => $anno_type,
    'label' => $anno_label,
    'text' => $anno_text,
  );

  return $svg_info;
}

/**
 * Builds viewer for Media objects.
 *
 * @param AbstractObject $version
 *   Object representing Versionable object
 * @param array $variables
 *   Theme variables
 *
 * @return array
 *   Theme variables
 */
function versionable_object_viewer_build_version_media_view($version, &$variables) {
  module_load_include('inc', 'islandora', 'includes/solution_packs');
  module_load_include('inc', 'islandora_image_annotation', 'includes/utils');
  module_load_include('inc', 'islandora_paged_content', 'includes/utilities');

  // Use this to determine what to show by default.
  $variables['hide_components'] = array(
    'n' => 'false',
    's' => 'false',
    'e' => 'false',
    'w' => 'false',
  );
  drupal_add_js(array('versionable_object_viewer' => array('mode' => $variables['content_model_type'])), 'setting');
  if ($variables['content_model_type'] == 'audio') {
    $data = $version->relationships->get(FEDORA_RELS_EXT_URI, EMICDORA_ISDERIVATIONOF);
    $source = islandora_object_load($data[0]['object']['value']);
    $variables['show_components']['w'] = 'true';
    if (isset($source['PROXY_MP3'])) {
      $audio_params = versionable_object_viewer_get_audio_params($source);
    }
    // Thumbnail.
    if (isset($source['TN']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $source['TN'])) {
      $tn_url = url("islandora/object/{$source->id}/datastream/TN/view");
      $params = array(
        'title' => $source->label,
        'path' => $tn_url,
      );
      $variables['islandora_thumbnail_img'] = theme('image', $params);
      $audio_params['tn'] = $tn_url;
    }

    $viewer = islandora_get_viewer($audio_params, 'islandora_audio_viewers', $source);
    $variables['params'] = $audio_params;
    if ($viewer) {
      $variables['islandora_content'] = $viewer;
    }
    elseif (isset($variables['islandora_thumbnail_img']) && isset($source['PROXY_MP3']) &&
        islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $source['PROXY_MP3'])) {

      $variables['islandora_content'] = l($variables['islandora_thumbnail_img'], $audio_params['url'], array('html' => TRUE));
    }
    elseif (isset($source['PROXY_MP3']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $source['PROXY_MP3'])) {
      $variables['islandora_content'] = l($source->label, $audio_params['url']);
    }
    $variables['pager_data'] = versionable_object_viewer_get_transcription_text($version);
  }
  if ($variables['content_model_type'] == 'video') {
    $variables['show_components']['w'] = 'true';
    $data = $version->relationships->get(FEDORA_RELS_EXT_URI, EMICDORA_ISDERIVATIONOF);
    $source = islandora_object_load($data[0]['object']['value']);

    $video_params = versionable_object_viewer_get_video_params($source);
    $viewer = islandora_get_viewer($video_params, 'islandora_video_viewers', $source);
    $variables['params'] = $video_params;
    if ($viewer) {
      $variables['islandora_content'] = $viewer;
    }
    $variables['pager_data'] = versionable_object_viewer_get_transcription_text($version);
  }
  if ($variables['content_model_type'] == 'image') {

    $variables['show_components']['w'] = 'true';
    $module_path = drupal_get_path('module', 'versionable_object_viewer');

    $data = $version->relationships->get(FEDORA_RELS_EXT_URI, EMICDORA_ISDERIVATIONOF);
    $source = islandora_object_load($data[0]['object']['value']);
    $variables['islandora_content'] = theme('islandora_anno_image_pane');
    $variables['pager_data'] = versionable_object_viewer_get_transcription_text($version);
    drupal_add_js(array('islandora_image_annotation' => array('PID' => $source->id)), 'setting');

    islandora_image_annotation_include_common_js();
    islandora_image_annotation_include_common_css();

    drupal_add_js($module_path . '/js/islandora_image_annotation_init.js');
  }
  $members = versionable_object_viewer_get_members($variables['islandora_object']);
  $pids = array();
  // Ensure page pids have a 'TEI_RDF' datastream.
  foreach ($members as $member) {
    array_push($pids, $member['obj']['value']);
  }
  $derivation_pids = array();
  foreach ($pids as $pid) {
    $page_derivation = islandora_object_load($pid);
    $page_derivation_source = $page_derivation->relationships->get(FEDORA_RELS_EXT_URI, EMICDORA_ISDERIVATIONOF);
    $pg_derivation_pid = $page_derivation_source[0]['object']['value'];
    array_push($derivation_pids, $pg_derivation_pid);
  }
  $variables['pager_data'] = $pids;
  drupal_add_js(array('versionable_object_viewer' => array('tei_rdf_pids' => $pids)), 'setting');
  drupal_add_js(array('versionable_object_viewer' => array('pids' => $derivation_pids)), 'setting');
  $variables['tree_source'] = url("islandora/object/$derivation_pids[0]/get_tree_data/{$version->id}");
  if ($variables['content_model_type'] == 'text') {
    $variables['islandora_content'] = theme('islandora_anno_image_pane');
    drupal_add_js(array('islandora_image_annotation' => array('PID' => $derivation_pids[0])), 'setting');
    islandora_image_annotation_include_common_js();
    islandora_image_annotation_include_common_css();
    $module_path = drupal_get_path('module', 'versionable_object_viewer');
    drupal_add_js($module_path . '/js/islandora_image_annotation_init.js');
  }
  return $variables;
}

/**
 * Find all 'isMemberOf' relationships for the given object.
 *
 * @param AbstractObject $object
 *   Fedora object instance.
 * @param string $content_model
 *   OPTIONAL, defaults to 'islandora:tei-rdfCModel'.
 *
 * @return array
 *   The query results as an array.
 */
function versionable_object_viewer_get_members(AbstractObject $object, $content_model = 'islandora:tei-rdfCModel') {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $tuque = islandora_get_tuque_connection();
  $query = "PREFIX fedora-model: <info:fedora/fedora-system:def/model#>
            PREFIX fedora-rels-ext: <info:fedora/fedora-system:def/relations-external#>
            SELECT ?obj FROM <#ri> WHERE {
              ?obj <fedora-rels-ext:isMemberOf> <info:fedora/$object->id> .
              ?obj <fedora-model:hasModel> <info:fedora/$content_model>.
            }";
  $results = $tuque->repository->ri->sparqlQuery($query, 'unlimited');
  return $results;
}

/**
 * Find all 'isDerivationOf' relations for a given versionable object.
 *
 * @param AbstractObject $versionable_object
 *   An instance of a versionable object.
 *
 * @return array
 *   Query results in an array.
 */
function versionable_object_viewer_process_version_object_source(AbstractObject $versionable_object) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $tuque = islandora_get_tuque_connection();
  $query = "PREFIX fedora-model: <info:fedora/fedora-system:def/model#>
            PREFIX fedora-rels-ext: <info:fedora/fedora-system:def/relations-external#>
              SELECT ?obj ?type FROM <#ri> WHERE {
              <info:fedora/$versionable_object->id> <fedora-rels-ext:isDerivationOf> ?obj . ?obj <fedora-model:hasModel> ?type
              FILTER (?type != <info:fedora/fedora-system:FedoraObject-3.0>)
              }";
  $results = $tuque->repository->ri->sparqlQuery($query, 'unlimited');
  return $results;
}

/**
 * Get audio params for jwplayer.
 *
 * @param AbstractObject $reference_object
 *   object representing fedora audio object
 *
 * @return array
 *   Associative array containing params.
 */
function versionable_object_viewer_get_audio_params($reference_object) {
  $audio_url = url("islandora/object/{$reference_object->id}/datastream/PROXY_MP3/view", array('absolute' => TRUE));
  $audio_params = array(
    "pid" => $reference_object->id,
    "url" => $audio_url,
    "mime" => 'audio/mpeg',
    "width" => "100%",
  );
  return $audio_params;
}

/**
 * Get video params for jwplayer.
 *
 * @param AbstractObject $reference_object
 *   object representing fedora audio object
 *
 * @return array
 *   Associative array containing params.
 */
function versionable_object_viewer_get_video_params($reference_object) {
  $isChrome = stristr($_SERVER['HTTP_USER_AGENT'], 'chrome') !== FALSE;
  $viewer_dsid = ($isChrome && isset($reference_object['OGG'])) ? 'OGG' : 'MP4';

  $video_params = array(
    'pid' => $reference_object->id,
  );
  // Video player.
  if (isset($reference_object[$viewer_dsid]) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $reference_object[$viewer_dsid])) {
    $video_url = url("islandora/object/{$reference_object->id}/datastream/$viewer_dsid/view");
    $video_params += array(
      'mime' => 'video/mp4',
      'url' => $video_url,
      'width' => "100%",
    );
  }
  // Thumbnail.
  if (isset($reference_object['TN']) && islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $reference_object['TN'])) {
    $video_params += array(
      'tn' => url("islandora/object/{$reference_object->id}/datastream/TN/view", array('absolute' => TRUE)),
    );
  }
  return $video_params;
}

/**
 * Gets all transcriptions related to this object.
 *
 * @param string $versionable_object_pid
 *   PID of object
 *
 * @return array
 *   Array of pid=>label pairs
 */
function versionable_object_viewer_get_related_transcriptions($versionable_object_pid) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $tuque = islandora_get_tuque_connection();
  $query = "
            PREFIX fm: <" . FEDORA_MODEL_URI . ">
            PREFIX fr: <" . FEDORA_RELS_EXT_URI . ">

            SELECT DISTINCT ?subject ?label FROM <#ri>
                WHERE {
                        {?subject fm:hasModel <info:fedora/islandora:transcriptionCModel>;
                                  fr:isMemberOf <info:fedora/$versionable_object_pid>;
                       }
                 OPTIONAL{
                           ?subject fm:label  ?label;
                          }
                       }";
  $objects = array();
  $results = $tuque->repository->ri->sparqlQuery($query, 'unlimited');
  foreach ($results as $result) {
    $objects[$result['subject']['value']] = $result['label']['value'];
  }
  return $objects;
}

/**
 * Get all transcriptions for a given versionable object.
 *
 * @param AbstractObject $object
 *   A versionable object.
 *
 * @return array
 *   An array of transcriptions, with 'title' and 'text' transcription keys.
 */
function versionable_object_viewer_get_transcription_text($object) {
  module_load_include('inc', 'versionable_object_viewer', 'includes/utilities');

  // Gather all transcriptions for this versionable object.
  $transcriptions_data = versionable_object_viewer_get_related_transcriptions($object->id);
  $transcriptions = array();
  foreach ($transcriptions_data as $key => $value) {
    $trans = islandora_object_load($key);
    $transcription_details['title'] = $transcriptions_data[$key];
    $transcription_details['text'] = $trans['TRANSCRIPTION']->content;
    array_push($transcriptions, $transcription_details);
  }
  return $transcriptions;
}

/**
 * Flatten all annotations for use with the version viewer 'tree'.
 *
 * @param array $annotations
 *   A zero based indexed array of entities/annotations.
 *
 * @return array
 *   An indexed array of annotations for use with the version viewer.
 */
function versionable_object_viewer_flatten_rdf_annos($annotations) {
  $tree_data = array();
  foreach ($annotations as $annotation) {
    if ($annotation['attributes']['cwrcType'] == 'textimagelink') {
      if (!isset($tree_data["textimagelink"])) {
        $tree_data["textimagelink"] = array(
          "id" => "tree_textimagelinks",
          "text" => "Text Image Annotations",
          "state" => "closed",
          "attributes" => array(
            "root" => TRUE,
          ),
          "children" => array(),
        );
      }
      $child = array(
        "id" => $annotation['id'],
        "text" => $annotation['text'],
        "state" => "open",
        "attributes" => $annotation['attributes'],
      );
      array_push(
          $tree_data["textimagelink"]["children"], $child
      );
    }
    else {
      if (!isset($tree_data['entity'])) {
        $tree_data['entity'] = array(
          "id" => "tree_entities",
          "text" => "Entities",
          "state" => "closed",
          "attributes" => array(
            "root" => TRUE,
          ),
          "children" => array(),
        );
      }
      $child = array(
        "id" => $annotation['id'],
        "text" => $annotation['text'],
        "state" => "open",
        "attributes" => $annotation['attributes'],
      );
      array_push(
          $tree_data['entity']["children"], $child
      );
    }
  }
  // The following sillyness ensures keys are numeric.
  foreach ($tree_data as $k => $v) {
    $new_key = array_search($k, array_keys($tree_data));
    $tree_data[$new_key] = $v;
  }
  unset($tree_data['entity'], $tree_data['textimagelink']);
  return $tree_data;
}

/**
 * Returns custom display information for version.
 *
 * @param string $version_pid
 *   PID of version
 *
 * @return object
 *   Configuration object
 */
function version_viewer_get_config($version_pid) {
  $query = db_select('versionable_object_config_choice', 'v');
  $query->join('versionable_object_custom_config', 'c', 'c.cid = v.cid');
  $query->fields('c');
  $query->condition('v.pid', $version_pid);
  $config = $query->execute()->fetchObject();
  return is_object($config) ? $config : NULL;
}

/**
 * Conditionally adds result to array.
 *
 * @param DOMNodeList $result
 *   Query result to be added
 * @param array $result_array
 *   Array of values to be displayed
 *
 * @return bool
 *   Indicates if there was a value to add.
 */
function version_viewer_conditionally_add($result, &$result_array) {
  if ($result->length > 0) {
    $result_array[] = $result->item(0)->nodeValue;
    return TRUE;
  }
  return FALSE;
}

/**
 * Prepare rendered name.
 *
 * @param array $input_array
 *   name data
 *
 * @return string
 *   Rendered name, with label
 */
function version_viewer_get_rendered_array($label, $input_array) {
  $renderable = array(
    'open_span' => array(
      '#type' => 'markup',
      '#markup' => "<span class='version_tooltip_label'>",
    ),
    'label' => array(
      '#type' => 'markup',
      '#markup' => $label,
    ),
    'spacer' => array(
      '#type' => 'markup',
      '#markup' => ": ",
    ),
    'closing_span' => array(
      '#type' => 'markup',
      '#markup' => "</span> ",
    ),
    'name' => array(
      '#type' => 'markup',
      '#markup' => implode(", ", $input_array),
    ),
    'closing_br' => array(
      '#type' => 'markup',
      '#markup' => "<br/>",
    ),
  );
  return drupal_render($renderable);
}

/**
 * Gets formatted Title info.
 *
 * @param string $label
 *   Displayed label
 * @param DOMNodeList $content
 *   Displayed content
 *
 * @return string
 *   Formatted output if populated, empty string if not.
 */
function version_viewer_get_markup($label, $content) {
  if ($content->length > 0) {
    $value = $content->item(0)->nodeValue;
    return "<span class = 'version_tooltip_label'>$label: </span>$value<br/>";
  }
  return '';
}

/**
 * Gets and concatenates typed values.
 *
 * @param DOMXpath $xpath
 *   xpath object to query DOM
 * @param DOMDocument $dom
 *   Representation of MODS xml
 * @param string $query_string
 *   XPAth query string
 * @param string $label
 *   Translated label for output
 *
 * @return string
 *   Formatted markup
 */
function version_viewer_add_markup($xpath, $dom, $query_string, $label) {
  $type_nodes = $xpath->query($query_string);
  $markup = '';
  $nodes = array();
  if ($type_nodes->length > 0) {
    $types = array();
    foreach ($type_nodes as $node) {
      $certainty = version_viewer_get_certainty($xpath, $node);
      if ($node->nodeValue) {
        $nodes[] = ucfirst($node->nodeValue) . $certainty;
      }
    }
    $node_string = implode(', ', $nodes);
    $markup .= "<span class='version_tooltip_label'>{$label}: </span>{$node_string}<br/>";
  }
  return $markup;
}

/**
 * Gets certainty attribute for node.
 *
 * @param DOMXpath $xpath
 *   xpath object to query DOM
 * @param DOMElement $node
 *   Node to query
 *
 * @return string
 *   Certainty
 */
function version_viewer_get_certainty($xpath, $node) {
  $certainty_array = array(
    "1" => t("Speculative"),
    "2" => t("Probable"),
    "3" => t("Reasonably Certain"),
    "4" => t("Definite"),
  );
  $certainty = "";
  $certs = $xpath->query("./@cert", $node);
  if ($certs->length > 0) {
    $cert = $certs->item(0)->nodeValue;
    if (array_key_exists($cert, $certainty_array)) {
      $certainty = " ({$certainty_array[$cert]})";
    }
  }
  return $certainty;
}

/**
 * Gets DOMXPath object to query VIAF record.
 *
 * @param string $id
 *   VIAF id
 *
 * @return DOMXPath
 *   XPath object for queries
 */
function version_viewer_get_xpath($id) {
  $url = url("/viaf/$id/viaf.xml", array('absolute' => TRUE));
  $viaf_xml = file_get_contents($url);
  $dom = new DOMDocument();
  $dom->loadXML($viaf_xml);
  $xpath = new DOMXPath($dom);
  $xpath->registerNamespace("ns2", "http://viaf.org/viaf/data");
  return $xpath;
}
