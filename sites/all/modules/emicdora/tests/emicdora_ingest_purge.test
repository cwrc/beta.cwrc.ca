<?php

/**
 * @file
 * Attempts to ingest and purge all the content types this module defines.
 */

/**
 * Class EmicdoraIngestPurgeTestCase.
 */
class EmicdoraIngestPurgeTestCase extends IslandoraCollectionWebTestCase {

  /**
   * Get test information.
   */
  public static function getInfo() {
    return array(
      'name' => 'Emicdora Ingest/Purge',
      'description' => 'Attempts to ingest and purge all the content types this module defines.',
      'group' => 'Emicdora',
    );
  }

  /**
   * Set up the test environment.
   */
  public function setUp() {
    parent::setUp(array(
      'islandora',
      'islandora_basic_collection',
      'emicdora',
    ));
  }

  /**
   * Creates an administrative user and attempts to ingest a test book and page.
   */
  public function testIngestPurgeCriticalEdition() {

    $user = $this->drupalCreateUser(array(
      'view fedora repository objects',
      'ingest fedora objects',
      'administer site configuration',
      'manage object properties',
      'delete fedora objects and datastreams',
      'create child collection',
    ));
    $this->drupalLogin($user);

    $label = $this->randomName(16);
    $suffix = $this->randomName(16);
    $collection_pid = 'emic:' . $suffix;
    $this->createTestCollection($label, 'islandora:criticalEditionContainerCModel', $collection_pid);

    // @todo Set configuration, when one is defined.
    $edit = array();
    $this->drupalPost('admin/islandora/emicdora', $edit, 'Save configuration');

    // Attempts to create the book.
    $path = 'islandora/object/' . $collection_pid . '/manage/overview/ingest';
    $edit = array(
      'models' => 'islandora:criticalEditionContainerCModel',
    );
    $this->drupalPost($path, $edit, t('Ingest'));
    $this->assertText('New Object', 'Critical Edition was created', 'Islandora');

    // Checks for book datastream creation.
    $critical_edition_object = $this->getObjectFromPath($this->url);
    $datastreams = array(
      'RELS-EXT',
      'DC',
    );
    $this->assertDatastreams($critical_edition_object, $datastreams);

    $this->deleteObject($critical_edition_object);
    // XXX: The standard admin user should have $connection, not just
    // $connection->repository, so that we have access to the cache, api, etc.
    $connection = islandora_get_tuque_connection($this->admin, $this->configuration['fedora_url']);
    $connection->cache->resetCache();
    $this->deleteTestCollection($collection_pid);
  }
}
